<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christian Lüdemann&#39;s blog</title>
    <link>https://blog.christianlydemann.com/</link>
    <description>Recent content on Christian Lüdemann&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Mar 2018 10:13:20 +0200</lastBuildDate>
    
	<atom:link href="https://blog.christianlydemann.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating an OpenID connect system with Angular 5 and Identity server 4 (OIDC part 1)</title>
      <link>https://blog.christianlydemann.com/post/openid-connect-part1/</link>
      <pubDate>Tue, 27 Mar 2018 10:13:20 +0200</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/openid-connect-part1/</guid>
      <description>OpenID connect authentication with dotnet core and Angular will demonstrate how to setup an app that support authentication and access control of certain resources in the system. This guide is based on the Identity Server docs which seems to favour a setup with a client, an Identity server and an API being with authorized resources. This setup implements the OpenID connect standard which enables single sign on and distributed access control.</description>
    </item>
    
    <item>
      <title>Creating a MEAN stack Application with Docker</title>
      <link>https://blog.christianlydemann.com/post/setup-meanstack-app-with-docker/</link>
      <pubDate>Sun, 28 Jan 2018 18:55:41 +0100</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/setup-meanstack-app-with-docker/</guid>
      <description>This post is about creating a MEAN stack app consisting of Angular 5, MongoDB, NodeJS and Express, running in Docker. It is based on a Github demo I created, which can be found here.
Docker overview Docker is used for running applications in containers making them contain everything needed for running the application: runtimes, system tools, libraries, OS and everything you would otherwise need to install yourself to run the application.</description>
    </item>
    
    <item>
      <title>Dynamic Form Rendering with Angular Reactive Forms</title>
      <link>https://blog.christianlydemann.com/post/dynamic-form-rendering/</link>
      <pubDate>Sun, 07 Jan 2018 17:38:54 +0100</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/dynamic-form-rendering/</guid>
      <description>A common need in enterprise application development is to support dynamically rendering of a form based on some domain specific metadata. This enables central control of domain logic and enables non-technical domain expert to control central domain logic that determines how the application is rendered, commonly using some CMS like GUI, presented in the domain language and used by the domain experts. Furthermore, it speeds up lead time of changes because the domain experts can implement changes themselves, working with a high level abstractions of the domain.</description>
    </item>
    
    <item>
      <title>Getting Angular Application Ready for Production</title>
      <link>https://blog.christianlydemann.com/post/angular-production-build/</link>
      <pubDate>Tue, 26 Dec 2017 17:45:58 +0100</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/angular-production-build/</guid>
      <description>This is an overview of how to prepare an Angular app for production. There will be future posts going more in depth with the various steps described here. Note: Angular CLI is fortunately doing a lot of this out of the box, but it’s still valuable to know what it is doing in case you need to set this up without Angular CLI. When preparing an Angular app for production it is important to optimize it in the various areas:</description>
    </item>
    
  </channel>
</rss>