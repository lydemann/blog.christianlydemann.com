---
title: "Dynamic Form Rendering"
date: 2018-01-07T17:38:54+01:00
draft: false
---

A common need in especially enterprise application development is to support dynamically rendering of a form based on some domain specific metadata. This enables central control of domain logic and enables non-technical domain expert to determine how the application is rendered, commonly using some CMS like GUI presented in the domain language. Furthermore it speeds of lead time of changes because the domain persons can implement changes themselves working with the abstractions of the domain.

Recently I have worked on implementing such system for support dynamic rendering of a questionnaire, being generated based on metadata provided by domain experts through a central domain service.
Meta data need to be in domain language vs front end needs to translate to UI elements.
Meta data will specify how the questions should be validated, answered and what the answer options should be whereas the client app will have complete control over how it should interpret this meta data for rendering.

Rendering a form dynamically and needing to set validation rules dynamically is recommended to be implemented using reactive forms, as contrast to template drive forms, because:
Reactive supports adding validation rules dynamically, whereas template driven forms hook up validation rules using directives, which can not be added dynamically (at least if you donâ€™t want to hack around).
Reactive forms will support better error handling because it is being mapped and generated in typescript code.
Reactive forms will save the templates from being cluttered with mapping and translation logic (or references to this).
Reactive forms defines the form in typescript code, and not in the html template as template driven forms, which will have better support for testing this form rendering logic.
On the downside, reactive forms is more complicated to work with than template driven forms, because the form needs to be defined in code.

Generating the formgroup

Applying the rules pattern to organize translation rules from domain meta data to ui presentation logic.
Getting typesafe metadata mapping using enumObject pattern.

Using template ref to reference UI rendering from their own files.


Putting it all together.

Conclusion
