<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Christian Lüdemann&#39;s blog</title>
    <link>https://blog.christianlydemann.com/post/</link>
    <description>Recent content in Posts on Christian Lüdemann&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 07 Apr 2018 18:23:09 +0200</lastBuildDate>
    
	<atom:link href="https://blog.christianlydemann.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>OpenID Connect Hybrid Flow for calling client api (OIDC Part 4)</title>
      <link>https://blog.christianlydemann.com/post/openid-connect-part4-hybrid-flow/</link>
      <pubDate>Sat, 07 Apr 2018 18:23:09 +0200</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/openid-connect-part4-hybrid-flow/</guid>
      <description>Last post we created an authorization code client, enabling the client to get the user claims from the id token, exchanged for the post login authorization code. That way we were able to display the user roles on an authorized MVC view. This time, instead of getting the user roles from the userInfo endpoint directly with an access token from AppClient, we are going to get it from the resource API, using an access token.</description>
    </item>
    
    <item>
      <title>OpenID Connect Interactive authentication with Authorization Code Flow (OIDC Part 3)</title>
      <link>https://blog.christianlydemann.com/post/openid-connect-part3-authorization-code-flow/</link>
      <pubDate>Wed, 04 Apr 2018 06:26:55 +0200</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/openid-connect-part3-authorization-code-flow/</guid>
      <description>Creating interactive authentication with an authorization code client (OIDC part 3)
In [part 2]() we created a simple OIDC setup using hard coded client credentials for the client to obtain an access token, so it could invoke the resource API. In this post, we are gonna enable interactive login on the identity server with hard coded test users using authorization flow. After the users has successfully logged in, the requested scopes will be provided to the client app using the callback url.</description>
    </item>
    
    <item>
      <title>Creating identity server setup with client credential authentication (OIDC part 2)</title>
      <link>https://blog.christianlydemann.com/post/openid-connect-part2-client-credentials/</link>
      <pubDate>Thu, 29 Mar 2018 16:07:57 +0200</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/openid-connect-part2-client-credentials/</guid>
      <description>In this post we are gonna take part 1 into action by creating a OpenID connect setup with a three server system using client credentials for authentication The three servers are:
 AuthorizationServer, implemented with IdentityServer4. ResourceApi, implemented with ASP.NET core and IdentityServer4.AccessTokenValidation Nuget package for access token validation. ClientApp, implemented as an ASP.NET MVC application with Angular using IdentityModel for getting access token.  The basic idea is that we register an in memory client and api resource on the AuthorizationServer, hardcode the client credentials in the ClientApp and exchanging these for an access token, which will grant the user access to an authorized endpoint on the ResourceApi.</description>
    </item>
    
    <item>
      <title>Creating an OpenID connect system with Angular 5 and IdentityServer4 (OIDC part 1)</title>
      <link>https://blog.christianlydemann.com/post/openid-connect-part1-openid-connect-overview/</link>
      <pubDate>Tue, 27 Mar 2018 10:13:20 +0200</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/openid-connect-part1-openid-connect-overview/</guid>
      <description>OpenID connect authentication with dotnet core and Angular will demonstrate how to setup an app that support authentication and access control of certain resources in the system. This guide is based on the Identity Server docs which seems to favour a setup with a client, an Identity server and an API being with authorized resources. This setup implements the OpenID connect standard which enables single sign on and distributed access control.</description>
    </item>
    
    <item>
      <title>Creating a MEAN stack Application with Docker</title>
      <link>https://blog.christianlydemann.com/post/setup-meanstack-app-with-docker/</link>
      <pubDate>Sun, 28 Jan 2018 18:55:41 +0100</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/setup-meanstack-app-with-docker/</guid>
      <description>This post is about creating a MEAN stack app consisting of Angular 5, MongoDB, NodeJS and Express, running in Docker. It is based on a Github demo I created, which can be found here.
Docker overview Docker is used for running applications in containers making them contain everything needed for running the application: runtimes, system tools, libraries, OS and everything you would otherwise need to install yourself to run the application.</description>
    </item>
    
    <item>
      <title>Dynamic Form Rendering with Angular Reactive Forms</title>
      <link>https://blog.christianlydemann.com/post/dynamic-form-rendering/</link>
      <pubDate>Sun, 07 Jan 2018 17:38:54 +0100</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/dynamic-form-rendering/</guid>
      <description>A common need in enterprise application development is to support dynamically rendering of a form based on some domain specific metadata. This enables central control of domain logic and enables non-technical domain expert to control central domain logic that determines how the application is rendered, commonly using some CMS like GUI, presented in the domain language and used by the domain experts. Furthermore, it speeds up lead time of changes because the domain experts can implement changes themselves, working with a high level abstractions of the domain.</description>
    </item>
    
    <item>
      <title>Getting Angular Application Ready for Production</title>
      <link>https://blog.christianlydemann.com/post/angular-production-build/</link>
      <pubDate>Tue, 26 Dec 2017 17:45:58 +0100</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/angular-production-build/</guid>
      <description>This is an overview of how to prepare an Angular app for production. There will be future posts going more in depth with the various steps described here. Note: Angular CLI is fortunately doing a lot of this out of the box, but it’s still valuable to know what it is doing in case you need to set this up without Angular CLI. When preparing an Angular app for production it is important to optimize it in the various areas:</description>
    </item>
    
  </channel>
</rss>