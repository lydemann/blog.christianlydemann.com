<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Openid Connect on Christian Lüdemann&#39;s blog</title>
    <link>https://blog.christianlydemann.com/tags/openid-connect/</link>
    <description>Recent content in Openid Connect on Christian Lüdemann&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 27 Mar 2018 10:13:20 +0200</lastBuildDate>
    
	<atom:link href="https://blog.christianlydemann.com/tags/openid-connect/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating an OpenID connect system with Angular 5 and Identity server 4 (OIDC part 1)</title>
      <link>https://blog.christianlydemann.com/post/openid-connect-part1-openid-connect-overview/</link>
      <pubDate>Tue, 27 Mar 2018 10:13:20 +0200</pubDate>
      
      <guid>https://blog.christianlydemann.com/post/openid-connect-part1-openid-connect-overview/</guid>
      <description>OpenID connect authentication with dotnet core and Angular will demonstrate how to setup an app that support authentication and access control of certain resources in the system. This guide is based on the Identity Server docs which seems to favour a setup with a client, an Identity server and an API being with authorized resources. This setup implements the OpenID connect standard which enables single sign on and distributed access control.</description>
    </item>
    
  </channel>
</rss>